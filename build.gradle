plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.57'
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }

}

base {
    archivesName = "$mod_id--mc$minecraft_version--neoforge-"
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
//minecraft.accessTransformers.entry public net.minecraft.client.Minecraft textureManager # textureManager

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
		workingDirectory project.file('run_nf1204')
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }


dependencies {
    // Specify the version of Minecraft to use.
    // Depending on the plugin applied there are several options. We will assume you applied the userdev plugin as shown above.
    // The group for userdev is net.neoforged, the module name is neoforge, and the version is the same as the neoforge version.
    // You can however also use the vanilla plugin (net.neoforged.gradle.vanilla) to use a version of Minecraft without the neoforge loader.
    // And its provides the option to then use net.minecraft as the group, and one of; client, server or joined as the module name, plus the game version as version.
    // For all intends and purposes: You can treat this dependency as if it is a normal library you would use.
    implementation "net.neoforged:neoforge:${neo_version}"

    // Example mod dependency with JEI
    // The JEI API is declared for compile time use, while the full JEI artifact is used at runtime
    // compileOnly "mezz.jei:jei-${mc_version}-common-api:${jei_version}"
    // compileOnly "mezz.jei:jei-${mc_version}-forge-api:${jei_version}"
    // runtimeOnly "mezz.jei:jei-${mc_version}-forge:${jei_version}"

    // Example mod dependency using a mod jar from ./libs with a flat dir repository
    // This maps to ./libs/coolmod-${mc_version}-${coolmod_version}.jar
    // The group id is ignored when searching -- in this case, it is "blank"
    // implementation "blank:coolmod-${mc_version}:${coolmod_version}"

    // Example mod dependency using a file as dependency
    // implementation files("libs/coolmod-${mc_version}-${coolmod_version}.jar")

    // Example project dependency using a sister or child project:
    // implementation project(":myproject")

    // For more info:
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    // +
	compileOnly "curse.maven:jei-238222:5101381"
    // +
    compileOnly "curse.maven:jade-324717:4980188"
    // + only on nf
    implementation "curse.maven:the-one-probe-245211:5084077"

    // +
	//runtimeOnly "curse.maven:badpackets-615134:5034255"
    compileOnly "curse.maven:wthit-forge-455982:5073587"

    // not out for 1.20.4
    // runtimeOnly "curse.maven:carry-on-274259:4628675"
    // +  only on nf
    //runtimeOnly "curse.maven:packing-tape-238659:4991026"

    //    +    (and also on lf)
	//runtimeOnly "curse.maven:balm-531761:5034381"
    compileOnly "curse.maven:crafting-tweaks-233071:4991559"

    //    +    (and also on lf)
	implementation "curse.maven:roughly-enough-items-310111:4973489"
	runtimeOnly "curse.maven:architectury-api-419699:5084477"
	implementation "curse.maven:cloth-config-348521:4973457"

	compileOnly "curse.maven:emi-580555:5096949"
    // out for neoforge on 1.20.4 but not on lexforge
    //compileOnly "maven.modrinth:curios:opCpnbhi"
	compileOnly "curse.maven:curios-309927:4960347"

    //compileOnly "curse.maven:travelers-backpack-321117:4836245"     // not out for 1.20.4
	
	//compileOnly "curse.maven:tetra-289712:4857842"       // not out for 1.20.4
	////runtimeOnly "curse.maven:mutil-351914:4824501"      // dep

//compileOnly files("libs/jei-1.20.2-forge-16.0.0.28.jar")
//compileOnly files("libs/emi-1.0.28+1.20.2+forge.jar")
//implementation files("libs/RoughlyEnoughItems-14.0.687-neoforge.jar")
//runtimeOnly files("libs/architectury-11.0.8-neoforge.jar")
//runtimeOnly files("libs/cloth-config-13.0.114-neoforge.jar")

//compileOnly files("libs/Jade-1.20.2-neoforge-12.1.8.jar")
//implementation files("libs/wthit-neo-10.0.1.jar	")
//runtimeOnly files("libs/badpackets-neo-0.5.4.jar")
//compileOnly files("libs/theoneprobe-1.20.1-10.0.1.jar")

//compileOnly files("libs/craftingtweaks-neoforge-1.20.2-19.0.2.jar")
//runtimeOnly files("libs/balm-neoforge-1.20.2-8.0.4.jar")

//implementation files("libs/curios-neoforge-7.0.0-beta.3+1.20.4.jar")
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description, pack_format_number: pack_format_number,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
